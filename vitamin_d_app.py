
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
np.random.seed(42)
n_samples = 500
df = pd.DataFrame({
    'Age': np.random.randint(18, 80, size=n_samples),
    'Sex': np.random.choice([0, 1], size=n_samples),
    'BMI': np.round(np.random.normal(25, 5, size=n_samples), 1),
    'Skin_Tone': np.random.choice([1, 2, 3], size=n_samples, p=[0.5, 0.4, 0.1]),
    'Region_Sun': np.random.choice([1, 2, 3], size=n_samples, p=[0.3, 0.5, 0.2]),
    'Sun_Exposure': np.clip(np.round(np.random.exponential(1, size=n_samples) * 2, 1), 0, 6),
    'Supplement_Intake': np.random.choice([0, 1], size=n_samples, p=[0.7, 0.3]),
    'Season': np.random.choice([1, 2, 3, 4], size=n_samples)
})

df['Vitamin_D'] = (
    20
    + (df['Sun_Exposure'] * 2)
    + (df['Region_Sun'] * 2)
    + (df['Supplement_Intake'] * 10)
    - (df['Skin_Tone'] * 2)
    - (df['Season'] == 1) * 5
    + np.random.normal(0, 5, size=n_samples)
)
df['Vitamin_D'] = np.clip(df['Vitamin_D'], 5, 80)

# –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
X = df.drop(columns='Vitamin_D')
y = df['Vitamin_D']

# OneHotEncoder
categorical_features = ['Skin_Tone', 'Region_Sun', 'Season', 'Sex']
preprocessor = ColumnTransformer(
    transformers=[('cat', OneHotEncoder(drop='first'), categorical_features)],
    remainder='passthrough'
)

X_encoded = preprocessor.fit_transform(X)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model_lin = LinearRegression()
model_lin.fit(X_encoded, y)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict_vitamin_d(age, sex, bmi, skin_tone, region_sun, sun_exposure, supplement_intake, season):
    input_df = pd.DataFrame([{
        'Age': age,
        'Sex': sex,
        'BMI': bmi,
        'Skin_Tone': skin_tone,
        'Region_Sun': region_sun,
        'Sun_Exposure': sun_exposure,
        'Supplement_Intake': supplement_intake,
        'Season': season
    }])
    input_encoded = preprocessor.transform(input_df)
    prediction = model_lin.predict(input_encoded)
    return round(prediction[0], 1)

# Streamlit UI
st.title('üíä –ü—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–≤–Ω—è –≤–∏—Ç–∞–º–∏–Ω–∞ D')

st.write('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:')

age = st.number_input('–í–æ–∑—Ä–∞—Å—Ç', min_value=0, max_value=120, value=30)
sex = st.selectbox('–ü–æ–ª', options=[('–ñ–µ–Ω—â–∏–Ω–∞', 0), ('–ú—É–∂—á–∏–Ω–∞', 1)], format_func=lambda x: x[0])[1]
bmi = st.number_input('–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (BMI)', min_value=10.0, max_value=60.0, value=25.0)
skin_tone = st.selectbox('–¶–≤–µ—Ç –∫–æ–∂–∏', options=[('–°–≤–µ—Ç–ª—ã–π', 1), ('–°—Ä–µ–¥–Ω–∏–π', 2), ('–¢—ë–º–Ω—ã–π', 3)], format_func=lambda x: x[0])[1]
region_sun = st.selectbox('–°–æ–ª–Ω–µ—á–Ω–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞', options=[('–ù–∏–∑–∫–∞—è', 1), ('–°—Ä–µ–¥–Ω—è—è', 2), ('–í—ã—Å–æ–∫–∞—è', 3)], format_func=lambda x: x[0])[1]
sun_exposure = st.number_input('–í—Ä–µ–º—è –Ω–∞ —Å–æ–ª–Ω—Ü–µ –≤ –¥–µ–Ω—å (—á–∞—Å—ã)', min_value=0.0, max_value=10.0, value=1.0)
supplement_intake = st.selectbox('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∏—Ç–∞–º–∏–Ω D?', options=[('–ù–µ—Ç', 0), ('–î–∞', 1)], format_func=lambda x: x[0])[1]
season = st.selectbox('–°–µ–∑–æ–Ω', options=[('–ó–∏–º–∞', 1), ('–í–µ—Å–Ω–∞', 2), ('–õ–µ—Ç–æ', 3), ('–û—Å–µ–Ω—å', 4)], format_func=lambda x: x[0])[1]

if st.button('üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å'):
    result = predict_vitamin_d(age, sex, bmi, skin_tone, region_sun, sun_exposure, supplement_intake, season)
    st.success(f"üí° –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∏—Ç–∞–º–∏–Ω–∞ D: {result} –Ω–≥/–º–ª")
